/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import model from '../../../models/portal_model.glb';
import { gsap, Power1, Power2 } from 'gsap';
import { lerp } from 'three/src/math/MathUtils';
import matcapTexture from '../../../img/matcap.png';
import useStore from '../../../store';

export default function PortalModel(props) {
  const group = useRef();
  const ref = useRef();
  const letters = useRef();
  const airRock1 = useRef();
  const airRock2 = useRef();
  const airRock3 = useRef();
  const airRock4 = useRef();
  const emissionRef = useRef();
  const platformRef = useRef();

  const texture = useTexture(matcapTexture);

  const view = useStore((state) => state.view);
  const leavingIpad = useStore((state) => state.leavingIpad);

  useEffect(() => {
    if (view === 'aboutEntered' && !leavingIpad) {
      gsap.to(ref.current.scale, {
        x: 1,
        y: 1,
        z: 1,

        delay: 0.25,
        ease: Power2.easeOut,
        duration: 0.5,
      });
    } else if (leavingIpad) {
      gsap.to(ref.current.scale, {
        x: 0,
        y: 0,
        z: 0,

        ease: Power2.easeOut,
        duration: 0.5,
      });
    }
  }, [view, leavingIpad]);

  useEffect(() => {
    gsap.to(airRock1.current.position, {
      duration: 2.8,
      ease: Power1.easeInOut,
      y: 3,
      repeat: -1,
      yoyo: true,
    });

    gsap.to(airRock2.current.position, {
      duration: 3.2,
      ease: Power1.easeInOut,
      y: 12.5,
      repeat: -1,
      yoyo: true,
    });

    gsap.to(airRock3.current.position, {
      duration: 2.4,
      ease: Power1.easeInOut,
      y: 9,
      repeat: -1,
      yoyo: true,
    });

    gsap.to(airRock4.current.position, {
      duration: 3.25,
      ease: Power1.easeInOut,
      y: 4.3,
      repeat: -1,
      yoyo: true,
    });
  }, []);

  useFrame(({ clock, mouse }) => {
    let [, py] = props.position;
    let x = mouse.x * 0.65;
    let y = mouse.y * 0.65;

    if (group.current) {
      group.current.position.y =
        py - Math.cos((clock.elapsedTime + 2) * 0.35) * 0.15;
    }

    if (ref.current) {
      ref.current.position.x = lerp(ref.current.position.x, x, 0.035);
      ref.current.position.y = lerp(ref.current.position.y, y, 0.035);
    }
  });

  const { nodes } = useGLTF(model);
  return (
    <group ref={group} {...props} dispose={null}>
      <group ref={ref} scale={[0, 0, 0]}>
        <mesh
          geometry={nodes.letters.geometry}
          ref={letters}
          position={[0.05574, 6.93339, -0.00698]}
        >
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
        <mesh
          geometry={nodes.air_rock001.geometry}
          ref={airRock1}
          position={[-3.14247, 1.59546, 3.03652]}
        >
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
        <mesh
          geometry={nodes.air_rock002.geometry}
          ref={airRock2}
          position={[-2.40939, 11.24023, -2.64953]}
        >
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
        <mesh
          geometry={nodes.air_rock003.geometry}
          ref={airRock3}
          position={[4.34263, 7.24577, -2.62799]}
        >
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
        <mesh
          geometry={nodes.air_rock.geometry}
          ref={airRock4}
          position={[3.15335, 3.2013, 2.33815]}
        >
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
        <mesh
          ref={platformRef}
          geometry={nodes.platform.geometry}
          position={[-0.03233, -1.16806, -1.12225]}
        >
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
        <mesh
          ref={emissionRef}
          position={[-0.20013, -0.70351, 0.21569]}
          scale={[1.1, 1, 1.1]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <planeGeometry args={[12, 12, 1, 1]} />
          <meshMatcapMaterial transparent={true} matcap={texture} />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload(model);
