/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import modelPath from '../../../models/rainforest.glb';
import matcapPath from '../../../img/matcap.png';
import { useFrame } from '@react-three/fiber';
import { lerp } from 'three/src/math/MathUtils';
import useStore from '../../../store';
import { gsap, Power2 } from 'gsap';

export default function RainforestModel(props) {
  const group = useRef();
  const ref = useRef();

  const texture = useTexture(matcapPath);

  const view = useStore((state) => state.view);
  const leavingIpad = useStore((state) => state.leavingIpad);

  useEffect(() => {
    if (view === 'aboutEntered' && !leavingIpad) {
      gsap.to(ref.current.scale, {
        x: 1,
        y: 1,
        z: 1,

        delay: 0.75,
        ease: Power2.easeOut,
        duration: 0.5,
      });
    } else if (leavingIpad) {
      gsap.to(ref.current.scale, {
        x: 0,
        y: 0,
        z: 0,

        ease: Power2.easeOut,
        duration: 0.5,
      });
    }
  }, [view, leavingIpad]);

  useFrame(({ clock, mouse }) => {
    let [, py] = props.position;

    if (group.current) {
      group.current.position.y = py + Math.cos(clock.elapsedTime * 0.35) * 0.15;
    }

    let x = mouse.x * 0.45;
    let y = mouse.y * 0.45;

    if (ref.current) {
      ref.current.rotation.y = clock.elapsedTime * 0.075;
      ref.current.position.x = lerp(ref.current.position.x, x, 0.015);
      ref.current.position.y = lerp(ref.current.position.y, y, 0.015);
    }
  });

  const { nodes } = useGLTF(modelPath);
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh ref={ref} geometry={nodes.rainforest.geometry} scale={[0, 0, 0]}>
        <meshMatcapMaterial matcap={texture} transparent={true} />
      </mesh>
    </group>
  );
}

useGLTF.preload(modelPath);
