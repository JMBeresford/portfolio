/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import model from '@/assets/models/starfield.glb';
import { StarfieldMaterial } from './shaders';
import { useFrame, useThree } from '@react-three/fiber';
import { useControls } from 'leva';

export function Starfield(props) {
  const ref = useRef();
  const { nodes } = useGLTF(model);
  const viewport = useThree((s) => s.viewport);
  const size = useThree((s) => s.size);

  const { starSize, color1, color2, color3 } = useControls('stars', {
    color1: '#fffbd7',
    color2: '#9de3f8',
    color3: '#ffffff',
    starSize: { value: 17.5, min: 1, max: 45, step: 0.1 },
  });

  useFrame(({ clock }) => {
    ref.current.material.uTime = clock.elapsedTime + 100;
  });

  return (
    <group {...props} dispose={null}>
      <points
        ref={ref}
        geometry={nodes.starfield.geometry}
        position={[0, 0, 0]}
        scale={[0.75, 0.75, 0.75]}
      >
        <StarfieldMaterial
          uPointSize={Math.max(
            starSize * viewport.dpr * (size.height / 600),
            15
          )}
          uColor1={color1}
          uColor2={color2}
          uColor3={color3}
        />
      </points>
    </group>
  );
}

useGLTF.preload(model);
